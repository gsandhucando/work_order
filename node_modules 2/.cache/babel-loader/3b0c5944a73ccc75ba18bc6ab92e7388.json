{"ast":null,"code":"import _slicedToArray from \"/Users/gsandhu916/Desktop/projects/hatchways_app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/Body.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport env from '../env.json';\nimport WorkOrder from './WorkOrder';\n\nfunction Header() {\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      workOrders = _useState2[0],\n      setWorkOrders = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        workers = _useState4[0],\n        setWorkers = _useState4[1];\n\n  let _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      savedWorkOrders = _useState6[0],\n      setSavedWorkOrders = _useState6[1];\n\n  let _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMessage = _useState8[0],\n      setErrorMessage = _useState8[1];\n\n  useEffect(() => {\n    //call the work orders\n    axios.get(\"\".concat(env.API_URL, \"/assessment/work_orders\")).then(res => {\n      setErrorMessage(''); //set workorders\n\n      setWorkOrders(res.data.orders); //have to keep original data before changing so had to set original copy then set it\n\n      setSavedWorkOrders(res.data.orders); //setting error message if res.status === 200\n\n      const workerTracker = new Set();\n      let allWorkers = [];\n      res.data.orders.forEach(order => {\n        if (!workerTracker.has(order.workerId)) {\n          workerTracker.add(order.workerId);\n          const req = axios.get(\"\".concat(env.API_URL, \"/assessment/workers/\").concat(order.workerId)).then(res => {\n            return res.data.worker;\n          });\n          allWorkers.push(req);\n        }\n      });\n      return Promise.all(allWorkers);\n    }).then(data => {\n      setWorkers(data);\n    }).catch(err => {\n      console.log(err); //set error message if bad request\n\n      setErrorMessage('Cant find work orders.');\n    });\n  }, []);\n\n  function onInputChange(event) {\n    let inputInfo = event.target.value.replace(' ', '').toLowerCase().trim();\n    const foundIndex = workers.findIndex(worker => worker.name.replace(' ', '').toLowerCase().trim() === inputInfo);\n    let filteredOrders = [];\n\n    if (foundIndex !== -1) {\n      filteredOrders = savedWorkOrders.filter(each => each.workerId === workers[foundIndex].id);\n    }\n\n    if (filteredOrders.length > 0) {\n      setWorkOrders(filteredOrders);\n    } else {\n      if (workOrders.length !== savedWorkOrders.length) {\n        setWorkOrders(savedWorkOrders);\n      }\n    }\n  }\n\n  function earliest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return a.deadline - b.deadline;\n    });\n    setWorkOrders(sortedWorkOrder);\n  }\n\n  function latest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return b.deadline - a.deadline;\n    });\n    setWorkOrders(sortedWorkOrder);\n  } // function savedWork(workerName, worker_id) {\n  //   //created object copy hash table that takes in the workers key = name and value = id\n  //   const newWorkerName = workerName.replace(' ', '').toLowerCase().trim();\n  //   const newSavedWorkers = { ...savedWorkers, [newWorkerName]: worker_id }\n  //   console.log(newSavedWorkers, 'in saved work')\n  //   setSavedWorkers.call(this, newSavedWorkers)\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"body-input\",\n    onChange: onInputChange,\n    type: \"text\",\n    placeholder: \"Please enter name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"body-btn-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"body-btn\",\n    onClick: earliest,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"EARLIEST\"), React.createElement(\"button\", {\n    className: \"body-btn\",\n    onClick: latest,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"LATEST\")), React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, workOrders.map(order => {\n    const worker = workers.find(worker => order.workerId === worker.id);\n    console.log(worker);\n    return worker ? React.createElement(WorkOrder, Object.assign({\n      key: order.id\n    }, order, {\n      worker: worker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })) : null;\n  })));\n}\n\nexport default Header;","map":{"version":3,"sources":["/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/Body.js"],"names":["React","useState","useEffect","axios","env","WorkOrder","Header","workOrders","setWorkOrders","workers","setWorkers","savedWorkOrders","setSavedWorkOrders","errorMessage","setErrorMessage","get","API_URL","then","res","data","orders","workerTracker","Set","allWorkers","forEach","order","has","workerId","add","req","worker","push","Promise","all","catch","err","console","log","onInputChange","event","inputInfo","target","value","replace","toLowerCase","trim","foundIndex","findIndex","name","filteredOrders","filter","each","id","length","earliest","sortedWorkOrder","slice","sort","a","b","deadline","latest","display","flexWrap","justifyContent","map","find"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport env from '../env.json'\n\nimport WorkOrder from './WorkOrder';\n\nfunction Header() {\n\n  let [workOrders, setWorkOrders] = useState([]);\n  const [workers, setWorkers] = useState([]);\n  let [savedWorkOrders, setSavedWorkOrders] = useState([]);\n  let [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    //call the work orders\n    axios.get(`${env.API_URL}/assessment/work_orders`)\n      .then(res => {\n        setErrorMessage('')\n        //set workorders\n        setWorkOrders(res.data.orders)\n        //have to keep original data before changing so had to set original copy then set it\n        setSavedWorkOrders(res.data.orders)\n        //setting error message if res.status === 200\n        const workerTracker = new Set();\n        let allWorkers = [];\n        res.data.orders.forEach(order => {\n          if (!workerTracker.has(order.workerId)) {\n            workerTracker.add(order.workerId);\n            const req = axios.get(`${env.API_URL}/assessment/workers/${order.workerId}`)\n            .then(res => {\n              return res.data.worker\n            });\n            allWorkers.push(req)\n          }\n        });\n        return Promise.all(allWorkers);\n      })\n      .then(data => {\n        setWorkers(data)\n      })\n      .catch(err => {\n        console.log(err)\n        //set error message if bad request\n        setErrorMessage('Cant find work orders.')\n      })\n\n  }, [])\n\n  function onInputChange(event) {\n    let inputInfo = event.target.value.replace(' ', '').toLowerCase().trim()\n    const foundIndex =  workers.findIndex(worker => worker.name.replace(' ', '').toLowerCase().trim() === inputInfo)\n    let filteredOrders = [];\n    if (foundIndex !== -1) {\n      filteredOrders = savedWorkOrders.filter(each => each.workerId === workers[foundIndex].id)\n    }\n    if (filteredOrders.length > 0) {\n      setWorkOrders(filteredOrders)\n    } else {\n      if (workOrders.length !== savedWorkOrders.length) {\n        setWorkOrders(savedWorkOrders)\n      }\n    }\n  }\n\n  function earliest() {\n    let sortedWorkOrder = workOrders.slice()\n    sortedWorkOrder.sort((a, b) => {\n      return a.deadline - b.deadline\n    })\n    setWorkOrders(sortedWorkOrder)\n  }\n\n  function latest() {\n    let sortedWorkOrder = workOrders.slice()\n    sortedWorkOrder.sort((a, b) => {\n      return b.deadline - a.deadline\n    })\n    setWorkOrders(sortedWorkOrder)\n  }\n\n  // function savedWork(workerName, worker_id) {\n  //   //created object copy hash table that takes in the workers key = name and value = id\n  //   const newWorkerName = workerName.replace(' ', '').toLowerCase().trim();\n  //   const newSavedWorkers = { ...savedWorkers, [newWorkerName]: worker_id }\n  //   console.log(newSavedWorkers, 'in saved work')\n  //   setSavedWorkers.call(this, newSavedWorkers)\n  // }\n  return (\n    <div>\n      {/* set error message remember to setErrorMessage to '' if good request */}\n      <input className='body-input' onChange={onInputChange} type='text' placeholder='Please enter name' />\n      <div className=\"body-btn-container\">\n      <button className=\"body-btn\" onClick={earliest}>EARLIEST</button>\n      <button className=\"body-btn\" onClick={latest}>LATEST</button>\n      </div>\n      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n        {workOrders.map(order => {\n          const worker = workers.find(worker => order.workerId === worker.id);\n          console.log(worker);\n          return worker ? <WorkOrder key={order.id} {...order} worker={worker} /> : null\n        })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}