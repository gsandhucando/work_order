{"ast":null,"code":"import _slicedToArray from \"/Users/gsandhu916/Desktop/projects/hatchways_app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/WorkOrder.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst WorkOrder = ({\n  workerId,\n  name,\n  description,\n  deadline,\n  id,\n  savedWork\n}) => {\n  let _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      worker = _useState2[0],\n      setWorker = _useState2[1]; // console.log(workerId)\n\n\n  useEffect(() => {\n    axios.get(\"\".concat(process.env.API_URL, \"assessment/workers/\").concat(workerId)).then(response => {\n      setWorker(response.data.worker); //the state we want to change is in body but we need to keep track of all the workers so we use the hash table in the body it passes the information back\n\n      savedWork(response.data.worker.name, response.data.worker.id);\n    }).catch(err => {\n      console.log(err); //do same as body\n    });\n  }, []);\n  let styles = {\n    workOrderContainer: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    wordOrderCard: {\n      margin: 10,\n      height: '40vh',\n      width: '40vw',\n      background: 'aqua'\n    }\n  };\n  let email = worker.email,\n      companyName = worker.companyName,\n      image = worker.image;\n  let worker_name = worker.name;\n  let formatedDate = new Date(deadline);\n  return React.createElement(\"div\", {\n    style: styles.workOrderContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.wordOrderCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, name), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, description)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      padding: '10px 0 0 10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    style: {\n      borderRadius: '50%',\n      height: 100\n    },\n    src: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, worker_name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, companyName), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, email)))), React.createElement(\"div\", {\n    style: {\n      textAlign: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"\".concat(formatedDate.getMonth(), \"/\").concat(formatedDate.getDate(), \"/\").concat(formatedDate.getFullYear(), \" \").concat(formatedDate.toLocaleTimeString('en-US')))));\n};\n\nexport default WorkOrder;","map":{"version":3,"sources":["/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/WorkOrder.js"],"names":["React","useEffect","useState","axios","WorkOrder","workerId","name","description","deadline","id","savedWork","worker","setWorker","get","process","env","API_URL","then","response","data","catch","err","console","log","styles","workOrderContainer","display","flexDirection","wordOrderCard","margin","height","width","background","email","companyName","image","worker_name","formatedDate","Date","padding","borderRadius","textAlign","getMonth","getDate","getFullYear","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst WorkOrder = ({workerId, name, description, deadline, id, savedWork}) => {\n  let [worker, setWorker] = useState({})\n// console.log(workerId)\n\nuseEffect(() => {\n  axios.get(`${process.env.API_URL}assessment/workers/${workerId}`)\n  .then(response => {\n    setWorker(response.data.worker)\n    //the state we want to change is in body but we need to keep track of all the workers so we use the hash table in the body it passes the information back\n    savedWork(response.data.worker.name, response.data.worker.id)\n  })\n  .catch(err => {\n    console.log(err)\n    //do same as body\n  })\n}, [])\n\n  let styles = {\n    workOrderContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    wordOrderCard: {\n      margin: 10,\n      height: '40vh',\n      width: '40vw',\n      background: 'aqua',\n    },\n\n  }\n\n  let {email, companyName, image} = worker\n  let worker_name = worker.name\n  let formatedDate = new Date(deadline)\n\n\n  return(\n    <div style={styles.workOrderContainer}>\n      <div style={styles.wordOrderCard}>\n      <div>\n      <h3>{name}</h3>\n      <h5>{description}</h5>\n      </div>\n      <div>\n        <div style={{display: 'flex', padding: '10px 0 0 10px'}}>\n          <img style={{borderRadius: '50%', height: 100}} src={image} />\n          <div>\n            <p>{worker_name}</p>\n            <p>{companyName}</p>\n            <p>{email}</p>\n          </div>\n        </div>\n      </div>\n      <div style={{textAlign: 'right'}}>\n      {`${formatedDate.getMonth()}/${formatedDate.getDate()}/${formatedDate.getFullYear()} ${formatedDate.toLocaleTimeString('en-US')}`}\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WorkOrder;"]},"metadata":{},"sourceType":"module"}