{"ast":null,"code":"import _objectSpread from \"/Users/gsandhu916/Desktop/projects/hatchways_app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/gsandhu916/Desktop/projects/hatchways_app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/Body.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport env from \"../env.json\";\nimport WorkOrder from \"./WorkOrder\";\n\nconst Header = () => {\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      workOrders = _useState2[0],\n      setWorkOrders = _useState2[1];\n\n  let _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      savedWorkers = _useState4[0],\n      setSavedWorkers = _useState4[1];\n\n  let _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      savedWorkOrders = _useState6[0],\n      setSavedWorkOrders = _useState6[1];\n\n  let _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMessage = _useState8[0],\n      setErrorMessage = _useState8[1];\n\n  useEffect(() => {\n    //call the work orders\n    axios.get(\"\".concat(env.API_URL, \"/assessment/work_orders\")).then(res => {\n      //set workorders\n      setWorkOrders(res.data.orders); //have to keep original data before changing so had to set original copy then set it\n\n      setSavedWorkOrders(res.data.orders); //setting error message if res.status === 200\n\n      setErrorMessage(\"\");\n    }).catch(err => {\n      console.log(err); //set error message if bad request\n\n      setErrorMessage(\"Cant find work orders.\");\n    });\n  }, []);\n\n  function onInputChange(event) {\n    console.log(event.target.value);\n    let inputInfo = event.target.value.replace(\" \", \"\").toLowerCase().trim();\n    let filteredOrders = savedWorkOrders.filter(each => {\n      //hash table\n      return each.workerId === savedWorkers[inputInfo];\n    });\n\n    if (filteredOrders.length > 0) {\n      setWorkOrders(filteredOrders);\n    } else {\n      if (workOrders.length !== savedWorkOrders.length) {\n        setWorkOrders(savedWorkOrders);\n      }\n    }\n  }\n\n  function earliest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return a.deadline - b.deadline;\n    });\n    setWorkOrders(sortedWorkOrder);\n  }\n\n  function latest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return b.deadline - a.deadline;\n    });\n    console.log(sortedWorkOrder);\n    setWorkOrders(sortedWorkOrder);\n  }\n\n  function savedWork(workerName, worker_id) {\n    //created object copy hash table that takes in the workers key = name and value = id\n    const newWorkerName = workerName.replace(' ', '').toLowerCase().trim();\n\n    const newSavedWorkers = _objectSpread({}, savedWorkers, {\n      [newWorkerName]: worker_id\n    });\n\n    setSavedWorkers(newSavedWorkers);\n  }\n\n  console.log(savedWorkers);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"body-input\",\n    onChange: onInputChange,\n    type: \"text\",\n    placeholder: \"Please enter name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    style: {\n      height: 40,\n      width: 100,\n      marginRight: 4\n    },\n    onClick: earliest,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"EARLIEST\"), React.createElement(\"button\", {\n    style: {\n      height: 40,\n      width: 100\n    },\n    onClick: latest,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"LATEST\")), errorMessage.length > 0 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, errorMessage)) : React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, workOrders.map(order => {\n    return React.createElement(WorkOrder, Object.assign({\n      key: order.id\n    }, order, {\n      savedWork: savedWork,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  })));\n};\n\nexport default Header;","map":{"version":3,"sources":["/Users/gsandhu916/Desktop/projects/hatchways_app/src/components/Body.js"],"names":["React","useState","useEffect","axios","env","WorkOrder","Header","workOrders","setWorkOrders","savedWorkers","setSavedWorkers","savedWorkOrders","setSavedWorkOrders","errorMessage","setErrorMessage","get","API_URL","then","res","data","orders","catch","err","console","log","onInputChange","event","target","value","inputInfo","replace","toLowerCase","trim","filteredOrders","filter","each","workerId","length","earliest","sortedWorkOrder","slice","sort","a","b","deadline","latest","savedWork","workerName","worker_id","newWorkerName","newSavedWorkers","marginTop","height","width","marginRight","display","flexWrap","justifyContent","map","order","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport env from \"../env.json\";\n\nimport WorkOrder from \"./WorkOrder\";\n\nconst Header = () => {\n  let [workOrders, setWorkOrders] = useState([]);\n  let [savedWorkers, setSavedWorkers] = useState({});\n  let [savedWorkOrders, setSavedWorkOrders] = useState([]);\n  let [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    //call the work orders\n    axios\n      .get(`${env.API_URL}/assessment/work_orders`)\n      .then(res => {\n        //set workorders\n        setWorkOrders(res.data.orders);\n        //have to keep original data before changing so had to set original copy then set it\n        setSavedWorkOrders(res.data.orders);\n        //setting error message if res.status === 200\n        setErrorMessage(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n        //set error message if bad request\n        setErrorMessage(\"Cant find work orders.\");\n      });\n  }, []);\n\n  function onInputChange(event) {\n    console.log(event.target.value);\n    let inputInfo = event.target.value\n      .replace(\" \", \"\")\n      .toLowerCase()\n      .trim();\n    let filteredOrders = savedWorkOrders.filter(each => {\n      //hash table\n      return each.workerId === savedWorkers[inputInfo];\n    });\n    if (filteredOrders.length > 0) {\n      setWorkOrders(filteredOrders);\n    } else {\n      if (workOrders.length !== savedWorkOrders.length) {\n        setWorkOrders(savedWorkOrders);\n      }\n    }\n  }\n\n  function earliest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return a.deadline - b.deadline;\n    });\n    setWorkOrders(sortedWorkOrder);\n  }\n\n  function latest() {\n    let sortedWorkOrder = workOrders.slice();\n    sortedWorkOrder.sort((a, b) => {\n      return b.deadline - a.deadline;\n    });\n    console.log(sortedWorkOrder);\n    setWorkOrders(sortedWorkOrder);\n  }\n\n  function savedWork(workerName, worker_id) {\n    //created object copy hash table that takes in the workers key = name and value = id\n    const newWorkerName = workerName.replace(' ', '').toLowerCase().trim();\n    const newSavedWorkers = {...savedWorkers, [newWorkerName]: worker_id}\n    setSavedWorkers(newSavedWorkers);\n  }\n  console.log(savedWorkers);\n  return (\n    <div>\n      <input\n        className='body-input'\n        onChange={onInputChange}\n        type=\"text\"\n        placeholder=\"Please enter name\"\n      />\n\n      <div style={{ marginTop: 10 }}>\n        <button\n          style={{ height: 40, width: 100, marginRight: 4 }}\n          onClick={earliest}\n        >\n          EARLIEST\n        </button>\n        <button style={{ height: 40, width: 100 }} onClick={latest}>\n          LATEST\n        </button>\n      </div>\n      {errorMessage.length > 0 ? (\n        <div>\n          <h1>{errorMessage}</h1>\n        </div>\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"center\"\n          }}\n        >\n          {workOrders.map(order => {\n            return (\n              <WorkOrder key={order.id} {...order} savedWork={savedWork} />\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}